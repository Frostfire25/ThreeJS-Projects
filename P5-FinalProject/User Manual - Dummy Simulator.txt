// --------------------------------------- //
  _____                                          
 |  __ \                                         
 | |  | |_   _ _ __ ___  _ __ ___  _   _         
 | |  | | | | | '_ ` _ \| '_ ` _ \| | | |        
 | |__| | |_| | | | | | | | | | | | |_| |        
 |_____/ \__,_|_| |_| |_|_| |_| |_|\__, |        
                                    __/ |        
   _____ _                 _       |___/         
  / ____(_)               | |     | |            
 | (___  _ _ __ ___  _   _| | __ _| |_ ___  _ __ 
  \___ \| | '_ ` _ \| | | | |/ _` | __/ _ \| '__|
  ____) | | | | | | | |_| | | (_| | || (_) | |   
 |_____/|_|_| |_| |_|\__,_|_|\__,_|\__\___/|_| 

	By: Derek Costello and Alexander Elguezabal

// --------------------------------------- //


Usage Guide.

Controls.

	W - Forward Walking
	A - Left Walking
	D - Right Walking
	S - Backwards Walking

	Mouse - Controls FOV movement.

	Left Click - Shoots a lazer (1.0x force)
	Right Click - Shoots a cannon ball (2.0x force)

Overview.

	You spawn inside a 512x512 terrain. The goal of the game is to walk arround and shoot a variety of spawning
	dummys. Once shooting, the dummys will fly around. Their bodys will contor with the placement of the associated bullet.
	Dummys spawn within a 25 block radius of the players character. 
	If not shot, dummys will respawn within 60 seconds of the original spawntime.

	Walking is restrained to the bounding box of the terrain (512x512).

	General game music plays casually in the background, while lazer and gun sounds are also present when shooting.

Dicussion & Decisions.

	Our project was built using a 3D Graphics software known as "Three.js". To simulate the physics of the game,
	we used a popular extension called "Physi.js". Physi.js allowed us to use things such as collisions, forces, and gravity with ease!

Why was this simulator a challenge to build?

	One of the toughest parts of the simulator to build was the flexibility of the dummys.
	Allowing them to maintain their form as rigid bodies while also flying around the map was tough.
		Originally the plan was to have the dummies use spring-like physics on each of its joints, but that
		became more difficult once we tried to do collision detection. It was noticeably easier to use premade
		rigidbodies from a physics library.
		Rigidbodies are objects that cannot be overlapped by other rigidbody objects -- this allows for 
		seamless bouncing and colliding.
	We ended up using a Physi.js to assist in the process of mainting a rigid, flexible body for the dummies.

	Here are some screneshots of our test enviornment for the dummies. 
	They are recieving a incomming force applied from a Physi.js BoxGeometry.
	
	https://media.discordapp.net/attachments/894784316255666286/1051745188961333318/image.png
	https://cdn.discordapp.com/attachments/894784316255666286/1051744749108862976/image.png
	https://cdn.discordapp.com/attachments/894784316255666286/1051744695799259148/image.png

	Along with that, getting the gun model and texture to load into the scene was a challenge.
		Model = Shape of object we are loading into scene. This is usally designed outside of Three.js
		if we are trying to load it in.
		Texture = Color and look of the object in Three.js. We can put grass on a ground model,
		felt on a poker table, you name it!
	Aligning both to follow the camera was tough, as we wanted to have some animations for the 
	movement of the gun alongside the camera.
	Though, we decided to attach the gun model together with the camera as a group in the end, 
	allowing the gun to stay in a consistent position.

	https://cdn.discordapp.com/attachments/894784316255666286/1051252322325508176/image.png

	Terrain generation was something we also played around with. 
	Originally, we used vertex shaders and displacement maps to load in a texture from a heightmap.
		Vertex shaders allow us to edit the vertices of an object (in our case, a plane used to represent the ground)
		quickly using our Graphics Card (which is much faster at those operations).
		Displacement maps are black and white images that tell us the height that each vertex should be placed at.
		Where there is white, the vertex will be higher -- darker areas have lower heights.
	Though, we quickly realized that we could not find the ground effectively with this solution.
	We looked at soluations for this issue, but quickly realized that it would be too complicated to attempt to resolve.
	Eventually, we simply edited the shape itself in Three.js to save the hassle.
	
	To 'find the ground,' we used a method called "Raycasting", where we take the position of our point-of-view (camera)
	in our scene, and make an arrow (ray) directly downward. Then, we ask the "Raycast" which object was touched first
	by that ray. We assume this object is the ground, so we set the position of our camera to be just above the ground we
	found.

	The following is some images of the generated terrain.
	https://cdn.discordapp.com/attachments/894784316255666286/1049904666441416754/image.png
	https://cdn.discordapp.com/attachments/894784316255666286/1049902332218986547/image.png
	https://cdn.discordapp.com/attachments/894784316255666286/1049898891430088734/image.png

	During this process we used fragment shaders which allow for displacement of the each fragment on render to 
	change the color of the terrain based on the heightmap provided. This in turn caused some issues.
		Fragment shaders are shaders (AKA work with the computer's GPU) that work on the
		inividual "Fragments" of an object in Three.js. 
			When an object is loaded in Three.js, it is split into a bunch of smaller units called 
			"Fragments". It is safe to think of this as each area on the object that corresponds
			with a pixel, but that is a bit oversimplifying.
		These fragments, once in the fragment shader, are then adjusted based on what we want from
		our shader -- this is usually a visual change such as color.
		In our case, we wanted to change the color of each fragment depending on its vertex's height.
	Though we enjoyed the generated pattern and decided to keep it mapped to the displayed terrain. 